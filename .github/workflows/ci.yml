name: Rust

on: [push, pull_request]

permissions:
  contents: write

env:
  RUSTFLAGS: -Dwarnings

jobs:
  check:
    name: ${{format('Build ({0})', matrix.name || matrix.rust)}}
    runs-on: ${{matrix.os || 'ubuntu'}}-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, beta]
        include:
          - rust: nightly
            components: rustc-dev
          - rust: nightly
            name: WebAssembly
            target: wasm32-unknown-unknown
            features: godot/experimental-wasm
          - rust: nightly
            name: WASI
            target: wasm32-wasi
            features: godot/experimental-wasm
          - rust: nightly
            name: Windows
            os: windows
    env:
      target: ${{matrix.target && format('--target={0}', matrix.target)}}
      features: ${{matrix.features && format('--features "{0}"', matrix.features)}}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          targets: ${{matrix.target}}
          components: ${{matrix.components}}
      - run: cargo check ${{env.target}} ${{env.features}}

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: llvm-tools, rustc-dev
      - run: cargo test --all-features --release --tests

  doc:
    name: Doc
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: --cfg=doc_cfg -Dbroken_intra_doc_links
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo doc --all-features

  msrv:
    name: Minimal versions
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo update -Z minimal-versions
      - run: cargo check --all-features

  miri:
    name: Miri
    runs-on: ubuntu-latest
    env:
      MIRIFLAGS: -Zmiri-strict-provenance
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@miri
      - run: cargo miri test --all-features

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustc-dev
      - run: "cargo clippy --all-features --tests --benches -- -Dclippy::all -Dclippy::pedantic"

  fmt:
    name: Fmt
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, rustc-dev
      - run: cargo fmt --all -- --check

  package:
    name: ${{format('Package ({0}{1})', matrix.name, matrix.mode == 'debug' && '.debug' || '')}}
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check, test, doc, msrv, miri, clippy, fmt]
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        name: [Windows, Linux, MacOS, MacOS.arm]
        mode: [debug, release]
        include:
          - mode: release
            release: --release
          - name: Windows
            os: windows
            extension: dll
          - name: Linux
            os: ubuntu
            extension: so
          - name: MacOS
            os: macos
            target: x86_64-apple-darwin
          - name: MacOS.arm
            os: macos
            target: aarch64-apple-darwin
          - os: macos
            extension: dylib
    env:
      target: ${{matrix.target && format('--target={0}', matrix.target)}}
      dir: ${{matrix.target && format('{0}/', matrix.target)}}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{matrix.target}}
      - run: cargo build ${{matrix.release}} ${{env.target}}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{format('{0}-{1}', matrix.target || matrix.os, matrix.mode)}}
          path: target/${{env.dir}}${{matrix.mode}}/*backrooms29.${{matrix.extension}}

  publish:
    name: Publish
    needs: package
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - run: mv ubuntu-debug/* libbackrooms29.debug.so
      - run: mv windows-debug/* backrooms29.debug.dll
      - run: mv aarch64-apple-darwin-debug/* libbackrooms29.arm64.debug.dylib
      - run: mv aarch64-apple-darwin-release/* libbackrooms29.arm64.dylib
      - run: mv x86_64-apple-darwin-debug/* libbackrooms29.debug.dylib
      - run: mv x86_64-apple-darwin-release/* libbackrooms29.dylib
      - uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ github.workspace }}/CHANGELOG.md
          files: |
            ubuntu-release/*
            windows-release/*
            macos-release/*
            *.debug.*
